import asyncio
import logging
from asyncio import Semaphore
from aiogram import Dispatcher, F
from aiogram.types import Message
from src.bot.broker import send_message_to_broker
from src.bot.log_conf import timing_decorator


def setup_link_handler(
    dp: Dispatcher,
    semaphore: Semaphore,
    check_link_func: callable,
    generate_task_id_func: callable,
):
    @dp.message(F.text)
    async def link(message: Message):
        logging.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id=} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ {message.text=}"
        )
        logging.info("–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—Å—ã–ª–∫—É...")
        if not check_link_func(message.text):
            await message.reply(
                "–≠—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º —Ç–æ, —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ(\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞!"
            )
            logging.info(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ {message.from_user.id=}\n"
            )
        else:
            async with semaphore:
                await message.answer(
                    "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ AI –±–æ—Ç–∞.\n–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å!"
                )
                await asyncio.sleep(2)
                logging.info(
                    "–°—Å—ã–ª–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–±–æ—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤..."
                )
                await message.answer("üìù–ü—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤...")
                # await (timing_decorator(send_message_to_broker))(
                #     queue_name="parser",
                #     link=message.text,
                #     user_telegram_id=message.from_user.id,
                #     task_id=generate_task_id_func(),
                # )
