import asyncio
import string
import random

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from .broker import send_message_to_broker
from .config import BOT_TOKEN

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

TASK_ID_LETTERS = string.ascii_lowercase + string.digits

@dp.message(Command("start"))
async def start(message: Message):
    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É
    button = InlineKeyboardButton(text="–ü–æ–Ω—è—Ç–Ω–æ ‚úÖ", callback_data="start_button")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button]])
    WELCOME_MESSAGE = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã –Ω–∞ —Ç–æ–≤–∞—Ä—ã —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤.

üìä –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –æ—Ç–∑—ã–≤–æ–≤ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞–∫—Ä—É—á–µ–Ω–Ω—ã–º–∏ (—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é). –û–¥–Ω–∞–∫–æ –≤–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —ç—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –ø—Ä–æ–≥–Ω–æ–∑, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ú–æ–∏ –≤—ã–≤–æ–¥—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º–∏, –∏ —è –Ω–µ –º–æ–≥—É –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å 100% —Ç–æ—á–Ω–æ—Å—Ç—å.
    """
    await message.answer(WELCOME_MESSAGE, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É
@dp.callback_query(F.data == "start_button")
async def process_callback_button(callback_query: CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞
    await bot.answer_callback_query(callback_query.id)
    text = "üîç –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä c Ozon –∏–ª–∏ Wildberries. –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–∑—ã–≤—ã –∏ —Å–æ–æ–±—â—É —Ç–µ–±–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
    await bot.send_message(callback_query.from_user.id, text)


def check_link(link: str) -> bool:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ WB
    if ("wildberries.ru" in link) and ("detail.aspx" in link):
        return True
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ OZON
    if ("ozon.ru" in link):
        return True
    return False


def generate_task_id() -> str:
    task_id = ""
    for _ in range(4):
        task_id += random.choice(TASK_ID_LETTERS)
    
    return task_id


@dp.message(F.text)
async def link(message: Message):
    if check_link(message.text) is False:
        await message.reply(
            "–≠—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º —Ç–æ, —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ(\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞!"
        )
    else:
        await message.answer(
            "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ AI –±–æ—Ç–∞.\n–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å!"
        )
        await asyncio.sleep(2)
        await message.answer("üìù–ü—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤...")
        await send_message_to_broker(
            queue_name='parser',
            link=message.text, user_telegram_id=message.from_user.id,
            task_id=generate_task_id()
        )


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
