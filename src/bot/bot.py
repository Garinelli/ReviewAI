import os
import re 
import asyncio
import random

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from .broker import send_message_to_broker
from .config import BOT_TOKEN
from .constants import TASK_ID_LETTERS, WELCOME_MESSAGE, START_MESSAGE
from .log_conf import logging, timing_decorator


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

semaphore = asyncio.Semaphore(5)
LINK_PATTERN = r'^https://www\.wildverries\.ru/catalog/\d+/detail\.aspx$'

def check_link(link: str) -> bool:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ WB
    logging.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä {link=}...")
    return re.fullmatch(LINK_PATTERN, link) is not None

def generate_task_id() -> str:
    logging.info("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è id –¥–ª—è —Ç–∞—Å–∫–∏...")
    task_id = ""
    for _ in range(8):
        task_id += random.choice(TASK_ID_LETTERS)
    logging.info(f"ID –¥–ª—è —Ç–∞—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ: {task_id=}")
    return task_id


async def send_request_status(
    user_telegram_id: int, message: str, task_id=None
) -> None:
    logging.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å—É...")
    await bot.send_message(chat_id=user_telegram_id, text=message)
    if not task_id is None:
        logging.info("–ü—ã—Ç–∞–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–∫—É")
        await bot.send_photo(
            chat_id=user_telegram_id, photo=FSInputFile(f"{task_id}.png")
        )
        os.remove(f"{task_id}.png")
    logging.info("–°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ‚úÖ\n")


@dp.message(Command("start"))
async def start(message: Message):
    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É
    logging.info(f"–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start {message.from_user.id=}...")
    logging.info("–°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É...")
    button = InlineKeyboardButton(text="–ü–æ–Ω—è—Ç–Ω–æ ‚úÖ", callback_data="start_button")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button]])
    logging.info("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
    await message.answer(
        WELCOME_MESSAGE.format(message.from_user.first_name), reply_markup=keyboard
    )
    logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ WELCOME_MESSAGE —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ\n")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É
@dp.callback_query(F.data == "start_button")
async def process_callback_button(callback_query: CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞
    logging.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç {callback_query.from_user.id=}...")
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, START_MESSAGE)
    logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ START_MESSAGE —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ\n")


@dp.message(F.text)
async def link(message: Message):
    logging.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id=} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ {message.text=}"
    )
    logging.info("–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—Å—ã–ª–∫—É...")
    if check_link(message.text) is False:
        await message.reply(
            "–≠—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º —Ç–æ, —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ(\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞!"
        )
        logging.info(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ {message.from_user.id=}\n"
        )
    else:
        async with semaphore:
            await message.answer(
                "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ AI –±–æ—Ç–∞.\n–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å!"
            )
            await asyncio.sleep(2)
            logging.info(
                "–°—Å—ã–ª–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–±–æ—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤..."
            )
            await message.answer("üìù–ü—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤...")
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∫ —Ñ—É–Ω–∫—Ü–∏–∏
            await (timing_decorator(send_message_to_broker))(
                queue_name="parser",
                link=message.text,
                user_telegram_id=message.from_user.id,
                task_id=generate_task_id(),
            )


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
